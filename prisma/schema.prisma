// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(uuid())
  name        String
  email       String   @unique
  password    String
  otp         String?
  otpExpiry   DateTime?
  sports      Sport[] @relation("UserSport")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("users")
}

model Sport {
  id          String   @id @default(uuid())
  name        String
  icon        String
  description String?
  users       User[] @relation("UserSport")
  leagues     League[]
  cups        Cup[]
  clubs       Club[]   @relation("SportClub")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("sport")
}

model League {
  id          String   @id @default(uuid())
  name        String
  description String?
  logo        String?
  country     String   @default("Mozambique")
  organizer   String
  Sport       Sport    @relation(fields: [sportId], references: [id])
  sportId     String
  clubs       Club[]   @relation("LeagueClubs")
  games       Game[]
  Season      Season   @relation(fields: [seasonId], references: [id])
  seasonId    String
  seasons     Season[] @relation("SeasonLeagues")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("league")
}

model Cup {
  id          String   @id @default(uuid())
  name        String
  description String?
  logo        String?
  country     String   @default("Mozambique")
  organizer   String
  sport       Sport    @relation(fields: [sportId], references: [id])
  sportId     String
  clubs       Club[]   @relation("CupClub")
  games       Game[]
  Season      Season   @relation(fields: [seasonId], references: [id])
  seasonId    String
  seasons     Season[] @relation("SeasonCups")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("cup")
}

model Season {
  id        String   @id @default(uuid())
  year      Int
  startDate DateTime
  endDate   DateTime
  leagues   League[] @relation("SeasonLeagues")
  cups      Cup[]    @relation("SeasonCups")
  League    League[]
  Cup       Cup[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("season")
}

model Club {
  id            String    @id @default(uuid())
  name          String
  shortName     String?
  description   String?
  logo          String?
  foundingDate  DateTime
  website       String?
  leagues       League[]  @relation("LeagueClubs")
  cups          Cup[]     @relation("CupClub")
  games         Game[]
  athlete       Athlete[]
  news          News[]
  sports        Sport[]   @relation("SportClub")
  homeTeamGames Game[]    @relation("HomeTeam")
  awayTeamGames Game[]    @relation("AwayTeam")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("club")
}

model Game {
  id             String   @id @default(uuid())
  dateTime       DateTime
  stadium        String
  location       String
  referee        String
  attendance     Float
  resultHomeTeam Int?
  resultAwayTeam Int?
  homeTeam       Club     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId     String
  awayTeam       Club     @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId     String
  League         League?  @relation(fields: [leagueId], references: [id])
  Cup            Cup?     @relation(fields: [cupId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Club           Club?    @relation(fields: [clubId], references: [id])
  clubId         String?
  leagueId       String?
  cupId          String?

  @@map("game")
}

model Athlete {
  id          String   @id @default(uuid())
  name        String
  position    String
  dateOfBirth DateTime
  nationality String
  height      Float
  weight      Float
  photoUrl    String?
  currentClub Club?    @relation(fields: [clubId], references: [id])
  clubId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("athlete")
}

model News {
  id             String   @id @default(uuid())
  title          String
  content        String
  publishDate    DateTime
  author         String
  associatedClub Club     @relation(fields: [clubId], references: [id])
  clubId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("news")
}
