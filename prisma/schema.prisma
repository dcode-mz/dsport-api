// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  name       String
  email      String       @unique
  password   String
  sports     Sport[]
  tournament Tournament[]
  clubs      Club[]
  userOtp    UserOtp?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("users")
}

model UserOtp {
  id        String   @id @default(uuid())
  otp       String
  otpExpiry DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("user_otp")
}

model Sport {
  id          String       @id @default(uuid())
  name        String
  icon        String
  description String?
  tournaments Tournament[]
  clubs       Club[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("sport")
}

model Tournament {
  id          String     @id @default(uuid())
  name        String
  description String?
  logo        String?
  country     String     @default("Mozambique")
  organizer   String
  Sport       Sport      @relation(fields: [sportId], references: [id])
  sportId     String
  Season      Season     @relation(fields: [seasonId], references: [id])
  seasonId    String
  clubs       Club[]
  matchdays   Matchday[]
  games       Game[]
  users       User[]
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  @@map("tournament")
}

model Season {
  id          String       @id @default(uuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  tournaments Tournament[]
  matchdays   Matchday[]
  games       Game[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("season")
}

model Club {
  id            String       @id @default(uuid())
  name          String
  shortName     String?
  description   String?
  logo          String?
  foundingDate  DateTime
  website       String?
  sports        Sport[]
  tournaments   Tournament[]
  athlete       Athlete[]
  news          News[]
  homeTeamGames Game[]       @relation("HomeTeam")
  awayTeamGames Game[]       @relation("AwayTeam")
  users         User[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt

  @@map("club")
}

model Game {
  id             String      @id @default(uuid())
  dateTime       DateTime
  stadium        String
  location       String
  referee        String
  attendance     Float
  homeTeam       Club        @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId     String
  awayTeam       Club        @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId     String
  resultHomeTeam Int?
  resultAwayTeam Int?
  tournament     Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId   String?
  matchday       Matchday    @relation(fields: [matchdayId], references: [id])
  matchdayId     String
  season         Season      @relation(fields: [seasonId], references: [id])
  seasonId       String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@map("game")
}

model Matchday {
  id           String     @id @default(uuid())
  number       Int
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  season       Season     @relation(fields: [seasonId], references: [id])
  seasonId     String
  games        Game[]

  @@map("matchday")
}

model Athlete {
  id          String   @id @default(uuid())
  name        String
  position    String
  dateOfBirth DateTime
  nationality String
  height      Float
  weight      Float
  photoUrl    String?
  currentClub Club?    @relation(fields: [clubId], references: [id])
  clubId      String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("athlete")
}

model News {
  id             String   @id @default(uuid())
  title          String
  content        String
  publishDate    DateTime
  author         String
  associatedClub Club     @relation(fields: [clubId], references: [id])
  clubId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("news")
}
