// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String       @id @default(uuid())
  name       String
  email      String       @unique
  password   String
  sports     Sport[]
  tournament Tournament[]
  clubs      Club[]
  userOtp    UserOtp?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@map("users")
}

model UserOtp {
  id        String   @id @default(uuid())
  otp       String
  otpExpiry DateTime
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("user_otp")
}

model Sport {
  id          String       @id @default(uuid())
  name        String
  icon        String
  description String?
  tournaments Tournament[]
  clubs       Club[]
  users       User[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("sport")
}

model Season {
  id          String       @id @default(uuid())
  name        String
  startDate   DateTime
  endDate     DateTime
  tournaments Tournament[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("season")
}

model Tournament {
  id          String   @id @default(uuid())
  name        String
  description String?
  logo        String?
  country     String   @default("Mozambique")
  organizer   String
  type        String   @default("League") // League, Cup, LeagueAndCup
  sport       Sport    @relation(fields: [sportId], references: [id])
  sportId     String
  season      Season   @relation(fields: [seasonId], references: [id])
  seasonId    String
  stage       Stage[]
  clubs       Club[]
  news        News[]
  users       User[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("tournament")
}

model Club {
  id              String       @id @default(uuid())
  name            String
  shortName       String?
  description     String?
  logo            String?
  stadium         String?
  location        String?
  foundingDate    DateTime
  website         String?
  sports          Sport[]
  tournaments     Tournament[]
  players         Player[]
  news            News[]
  homeTeamMatches Match[]      @relation("HomeTeam")
  awayTeamMatches Match[]      @relation("AwayTeam")
  users           User[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  Group           Group?       @relation(fields: [groupId], references: [id])
  groupId         String?

  @@map("club")
}

model Match {
  id             String   @id @default(uuid())
  dateTime       DateTime
  stadium        String
  location       String
  referee        String
  attendance     Float
  homeTeam       Club     @relation("HomeTeam", fields: [homeTeamId], references: [id])
  homeTeamId     String
  awayTeam       Club     @relation("AwayTeam", fields: [awayTeamId], references: [id])
  awayTeamId     String
  resultHomeTeam Int?
  resultAwayTeam Int?
  matchday       Matchday @relation(fields: [matchdayId], references: [id])
  matchdayId     String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("match")
}

model Stage {
  id           String     @id @default(uuid())
  name         String
  order        Int
  type         String // Group, Knockout
  hasMatchdays Boolean
  homeAndAway  Boolean // If true, matches are played home and away
  tournament   Tournament @relation(fields: [tournamentId], references: [id])
  tournamentId String
  groups       Group[]
  matchdays    Matchday[]

  @@map("stage")
}

model Group {
  id      String @id @default(uuid())
  name    String
  stage   Stage  @relation(fields: [stageId], references: [id])
  stageId String
  clubs   Club[]

  @@map("group")
}

model Matchday {
  id      String  @id @default(uuid())
  number  Int
  stage   Stage   @relation(fields: [stageId], references: [id])
  stageId String
  matches Match[]

  @@map("matchday")
}

model Player {
  id          String   @id @default(uuid())
  name        String
  position    String
  dateOfBirth DateTime
  nationality String
  height      Float
  weight      Float
  photoUrl    String?
  currentClub Club?    @relation(fields: [clubId], references: [id])
  clubId      String?
  news        News[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("player")
}

model News {
  id                   String      @id @default(uuid())
  title                String
  content              String
  publishDate          DateTime
  author               String
  associatedClub       Club?       @relation(fields: [clubId], references: [id])
  clubId               String?
  associatedPlayer     Player?     @relation(fields: [playerId], references: [id])
  playerId             String?
  associatedTournament Tournament? @relation(fields: [tournamentId], references: [id])
  tournamentId         String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt

  @@map("news")
}
